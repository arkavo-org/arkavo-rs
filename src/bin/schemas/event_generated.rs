// automatically generated by the FlatBuffers compiler, do not modify

// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod arkavo {
    extern crate flatbuffers;
    use self::flatbuffers::Follow;

    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MIN_ACTION: i8 = 0;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MAX_ACTION: i8 = 8;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ACTION: [Action; 9] = [
        Action::unused,
        Action::join,
        Action::apply,
        Action::approve,
        Action::leave,
        Action::cache,
        Action::store,
        Action::share,
        Action::invite,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct Action(pub i8);
    #[allow(non_upper_case_globals)]
    impl Action {
        pub const unused: Self = Self(0);
        pub const join: Self = Self(1);
        pub const apply: Self = Self(2);
        pub const approve: Self = Self(3);
        pub const leave: Self = Self(4);
        pub const cache: Self = Self(5);
        pub const store: Self = Self(6);
        pub const share: Self = Self(7);
        pub const invite: Self = Self(8);

        pub const ENUM_MIN: i8 = 0;
        pub const ENUM_MAX: i8 = 8;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::unused,
            Self::join,
            Self::apply,
            Self::approve,
            Self::leave,
            Self::cache,
            Self::store,
            Self::share,
            Self::invite,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::unused => Some("unused"),
                Self::join => Some("join"),
                Self::apply => Some("apply"),
                Self::approve => Some("approve"),
                Self::leave => Some("leave"),
                Self::cache => Some("cache"),
                Self::store => Some("store"),
                Self::share => Some("share"),
                Self::invite => Some("invite"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for Action {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for Action {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for Action {
        type Output = Action;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<i8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for Action {
        type Scalar = i8;
        #[inline]
        fn to_little_endian(self) -> i8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: i8) -> Self {
            let b = i8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for Action {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for Action {}
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MIN_ACTION_STATUS: i8 = 0;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MAX_ACTION_STATUS: i8 = 4;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ACTION_STATUS: [ActionStatus; 5] = [
        ActionStatus::unused,
        ActionStatus::preparing,
        ActionStatus::fulfilling,
        ActionStatus::fulfilled,
        ActionStatus::failed,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct ActionStatus(pub i8);
    #[allow(non_upper_case_globals)]
    impl ActionStatus {
        pub const unused: Self = Self(0);
        pub const preparing: Self = Self(1);
        pub const fulfilling: Self = Self(2);
        pub const fulfilled: Self = Self(3);
        pub const failed: Self = Self(4);

        pub const ENUM_MIN: i8 = 0;
        pub const ENUM_MAX: i8 = 4;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::unused,
            Self::preparing,
            Self::fulfilling,
            Self::fulfilled,
            Self::failed,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::unused => Some("unused"),
                Self::preparing => Some("preparing"),
                Self::fulfilling => Some("fulfilling"),
                Self::fulfilled => Some("fulfilled"),
                Self::failed => Some("failed"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for ActionStatus {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for ActionStatus {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for ActionStatus {
        type Output = ActionStatus;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<i8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for ActionStatus {
        type Scalar = i8;
        #[inline]
        fn to_little_endian(self) -> i8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: i8) -> Self {
            let b = i8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for ActionStatus {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for ActionStatus {}
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MIN_ENTITY_TYPE: i8 = 0;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MAX_ENTITY_TYPE: i8 = 3;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ENTITY_TYPE: [EntityType; 4] = [
        EntityType::unused,
        EntityType::stream_profile,
        EntityType::account_profile,
        EntityType::server,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct EntityType(pub i8);
    #[allow(non_upper_case_globals)]
    impl EntityType {
        pub const unused: Self = Self(0);
        pub const stream_profile: Self = Self(1);
        pub const account_profile: Self = Self(2);
        pub const server: Self = Self(3);

        pub const ENUM_MIN: i8 = 0;
        pub const ENUM_MAX: i8 = 3;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::unused,
            Self::stream_profile,
            Self::account_profile,
            Self::server,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::unused => Some("unused"),
                Self::stream_profile => Some("stream_profile"),
                Self::account_profile => Some("account_profile"),
                Self::server => Some("server"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for EntityType {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for EntityType {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for EntityType {
        type Output = EntityType;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<i8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for EntityType {
        type Scalar = i8;
        #[inline]
        fn to_little_endian(self) -> i8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: i8) -> Self {
            let b = i8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for EntityType {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for EntityType {}
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MIN_ATTRIBUTE_TYPE: i8 = 0;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MAX_ATTRIBUTE_TYPE: i8 = 2;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_ATTRIBUTE_TYPE: [AttributeType; 3] = [
        AttributeType::unused,
        AttributeType::time,
        AttributeType::location,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct AttributeType(pub i8);
    #[allow(non_upper_case_globals)]
    impl AttributeType {
        pub const unused: Self = Self(0);
        pub const time: Self = Self(1);
        pub const location: Self = Self(2);

        pub const ENUM_MIN: i8 = 0;
        pub const ENUM_MAX: i8 = 2;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::unused,
            Self::time,
            Self::location,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::unused => Some("unused"),
                Self::time => Some("time"),
                Self::location => Some("location"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for AttributeType {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for AttributeType {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<i8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for AttributeType {
        type Output = AttributeType;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<i8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for AttributeType {
        type Scalar = i8;
        #[inline]
        fn to_little_endian(self) -> i8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: i8) -> Self {
            let b = i8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for AttributeType {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            i8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for AttributeType {}
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MIN_EVENT_DATA: u8 = 0;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    pub const ENUM_MAX_EVENT_DATA: u8 = 3;
    #[deprecated(since = "2.0.0", note = "Use associated constants instead. This will no longer be generated in 2021.")]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_EVENT_DATA: [EventData; 4] = [
        EventData::NONE,
        EventData::UserEvent,
        EventData::CacheEvent,
        EventData::RouteEvent,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct EventData(pub u8);
    #[allow(non_upper_case_globals)]
    impl EventData {
        pub const NONE: Self = Self(0);
        pub const UserEvent: Self = Self(1);
        pub const CacheEvent: Self = Self(2);
        pub const RouteEvent: Self = Self(3);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 3;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::NONE,
            Self::UserEvent,
            Self::CacheEvent,
            Self::RouteEvent,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::NONE => Some("NONE"),
                Self::UserEvent => Some("UserEvent"),
                Self::CacheEvent => Some("CacheEvent"),
                Self::RouteEvent => Some("RouteEvent"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for EventData {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for EventData {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for EventData {
        type Output = EventData;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for EventData {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for EventData {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for EventData {}
    pub struct EventDataUnionTableOffset {}

    pub enum UserEventOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct UserEvent<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for UserEvent<'a> {
        type Inner = UserEvent<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self { _tab: flatbuffers::Table::new(buf, loc) }
        }
    }

    impl<'a> UserEvent<'a> {
        pub const VT_SOURCE_TYPE: flatbuffers::VOffsetT = 4;
        pub const VT_TARGET_TYPE: flatbuffers::VOffsetT = 6;
        pub const VT_SOURCE_ID: flatbuffers::VOffsetT = 8;
        pub const VT_TARGET_ID: flatbuffers::VOffsetT = 10;
        pub const VT_ATTRIBUTE_TYPE: flatbuffers::VOffsetT = 12;
        pub const VT_ENTITY_TYPE: flatbuffers::VOffsetT = 14;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            UserEvent { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args UserEventArgs<'args>
        ) -> flatbuffers::WIPOffset<UserEvent<'bldr>> {
            let mut builder = UserEventBuilder::new(_fbb);
            if let Some(x) = args.attribute_type { builder.add_attribute_type(x); }
            if let Some(x) = args.target_id { builder.add_target_id(x); }
            if let Some(x) = args.source_id { builder.add_source_id(x); }
            builder.add_entity_type(args.entity_type);
            builder.add_target_type(args.target_type);
            builder.add_source_type(args.source_type);
            builder.finish()
        }


        #[inline]
        pub fn source_type(&self) -> EntityType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<EntityType>(UserEvent::VT_SOURCE_TYPE, Some(EntityType::unused)).unwrap()}
        }
        #[inline]
        pub fn target_type(&self) -> EntityType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<EntityType>(UserEvent::VT_TARGET_TYPE, Some(EntityType::unused)).unwrap()}
        }
        #[inline]
        pub fn source_id(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(UserEvent::VT_SOURCE_ID, None)}
        }
        #[inline]
        pub fn target_id(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(UserEvent::VT_TARGET_ID, None)}
        }
        #[inline]
        pub fn attribute_type(&self) -> Option<flatbuffers::Vector<'a, AttributeType>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, AttributeType>>>(UserEvent::VT_ATTRIBUTE_TYPE, None)}
        }
        #[inline]
        pub fn entity_type(&self) -> EntityType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<EntityType>(UserEvent::VT_ENTITY_TYPE, Some(EntityType::unused)).unwrap()}
        }
    }

    impl flatbuffers::Verifiable for UserEvent<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            v.visit_table(pos)?
                .visit_field::<EntityType>("source_type", Self::VT_SOURCE_TYPE, false)?
                .visit_field::<EntityType>("target_type", Self::VT_TARGET_TYPE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("source_id", Self::VT_SOURCE_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("target_id", Self::VT_TARGET_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, AttributeType>>>("attribute_type", Self::VT_ATTRIBUTE_TYPE, false)?
                .visit_field::<EntityType>("entity_type", Self::VT_ENTITY_TYPE, false)?
                .finish();
            Ok(())
        }
    }
    pub struct UserEventArgs<'a> {
        pub source_type: EntityType,
        pub target_type: EntityType,
        pub source_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub target_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub attribute_type: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, AttributeType>>>,
        pub entity_type: EntityType,
    }
    impl<'a> Default for UserEventArgs<'a> {
        #[inline]
        fn default() -> Self {
            UserEventArgs {
                source_type: EntityType::unused,
                target_type: EntityType::unused,
                source_id: None,
                target_id: None,
                attribute_type: None,
                entity_type: EntityType::unused,
            }
        }
    }

    pub struct UserEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> UserEventBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_source_type(&mut self, source_type: EntityType) {
            self.fbb_.push_slot::<EntityType>(UserEvent::VT_SOURCE_TYPE, source_type, EntityType::unused);
        }
        #[inline]
        pub fn add_target_type(&mut self, target_type: EntityType) {
            self.fbb_.push_slot::<EntityType>(UserEvent::VT_TARGET_TYPE, target_type, EntityType::unused);
        }
        #[inline]
        pub fn add_source_id(&mut self, source_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserEvent::VT_SOURCE_ID, source_id);
        }
        #[inline]
        pub fn add_target_id(&mut self, target_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserEvent::VT_TARGET_ID, target_id);
        }
        #[inline]
        pub fn add_attribute_type(&mut self, attribute_type: flatbuffers::WIPOffset<flatbuffers::Vector<'b , AttributeType>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(UserEvent::VT_ATTRIBUTE_TYPE, attribute_type);
        }
        #[inline]
        pub fn add_entity_type(&mut self, entity_type: EntityType) {
            self.fbb_.push_slot::<EntityType>(UserEvent::VT_ENTITY_TYPE, entity_type, EntityType::unused);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> UserEventBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            UserEventBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<UserEvent<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for UserEvent<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("UserEvent");
            ds.field("source_type", &self.source_type());
            ds.field("target_type", &self.target_type());
            ds.field("source_id", &self.source_id());
            ds.field("target_id", &self.target_id());
            ds.field("attribute_type", &self.attribute_type());
            ds.field("entity_type", &self.entity_type());
            ds.finish()
        }
    }
    pub enum CacheEventOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct CacheEvent<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for CacheEvent<'a> {
        type Inner = CacheEvent<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self { _tab: flatbuffers::Table::new(buf, loc) }
        }
    }

    impl<'a> CacheEvent<'a> {
        pub const VT_TARGET_ID: flatbuffers::VOffsetT = 4;
        pub const VT_TARGET_PAYLOAD: flatbuffers::VOffsetT = 6;
        pub const VT_TTL: flatbuffers::VOffsetT = 8;
        pub const VT_ONE_TIME_ACCESS: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            CacheEvent { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args CacheEventArgs<'args>
        ) -> flatbuffers::WIPOffset<CacheEvent<'bldr>> {
            let mut builder = CacheEventBuilder::new(_fbb);
            builder.add_ttl(args.ttl);
            if let Some(x) = args.target_payload { builder.add_target_payload(x); }
            if let Some(x) = args.target_id { builder.add_target_id(x); }
            builder.add_one_time_access(args.one_time_access);
            builder.finish()
        }


        #[inline]
        pub fn target_id(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(CacheEvent::VT_TARGET_ID, None)}
        }
        #[inline]
        pub fn target_payload(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(CacheEvent::VT_TARGET_PAYLOAD, None)}
        }
        #[inline]
        pub fn ttl(&self) -> u32 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u32>(CacheEvent::VT_TTL, Some(0)).unwrap()}
        }
        #[inline]
        pub fn one_time_access(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<bool>(CacheEvent::VT_ONE_TIME_ACCESS, Some(false)).unwrap()}
        }
    }

    impl flatbuffers::Verifiable for CacheEvent<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("target_id", Self::VT_TARGET_ID, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("target_payload", Self::VT_TARGET_PAYLOAD, false)?
                .visit_field::<u32>("ttl", Self::VT_TTL, false)?
                .visit_field::<bool>("one_time_access", Self::VT_ONE_TIME_ACCESS, false)?
                .finish();
            Ok(())
        }
    }
    pub struct CacheEventArgs<'a> {
        pub target_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub target_payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub ttl: u32,
        pub one_time_access: bool,
    }
    impl<'a> Default for CacheEventArgs<'a> {
        #[inline]
        fn default() -> Self {
            CacheEventArgs {
                target_id: None,
                target_payload: None,
                ttl: 0,
                one_time_access: false,
            }
        }
    }

    pub struct CacheEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> CacheEventBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_target_id(&mut self, target_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CacheEvent::VT_TARGET_ID, target_id);
        }
        #[inline]
        pub fn add_target_payload(&mut self, target_payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(CacheEvent::VT_TARGET_PAYLOAD, target_payload);
        }
        #[inline]
        pub fn add_ttl(&mut self, ttl: u32) {
            self.fbb_.push_slot::<u32>(CacheEvent::VT_TTL, ttl, 0);
        }
        #[inline]
        pub fn add_one_time_access(&mut self, one_time_access: bool) {
            self.fbb_.push_slot::<bool>(CacheEvent::VT_ONE_TIME_ACCESS, one_time_access, false);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> CacheEventBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            CacheEventBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<CacheEvent<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for CacheEvent<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("CacheEvent");
            ds.field("target_id", &self.target_id());
            ds.field("target_payload", &self.target_payload());
            ds.field("ttl", &self.ttl());
            ds.field("one_time_access", &self.one_time_access());
            ds.finish()
        }
    }
    pub enum RouteEventOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct RouteEvent<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for RouteEvent<'a> {
        type Inner = RouteEvent<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self { _tab: flatbuffers::Table::new(buf, loc) }
        }
    }

    impl<'a> RouteEvent<'a> {
        pub const VT_TARGET_TYPE: flatbuffers::VOffsetT = 4;
        pub const VT_TARGET_ID: flatbuffers::VOffsetT = 6;
        pub const VT_SOURCE_TYPE: flatbuffers::VOffsetT = 8;
        pub const VT_SOURCE_ID: flatbuffers::VOffsetT = 10;
        pub const VT_ATTRIBUTE_TYPE: flatbuffers::VOffsetT = 12;
        pub const VT_ENTITY_TYPE: flatbuffers::VOffsetT = 14;
        pub const VT_PAYLOAD: flatbuffers::VOffsetT = 16;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            RouteEvent { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args RouteEventArgs<'args>
        ) -> flatbuffers::WIPOffset<RouteEvent<'bldr>> {
            let mut builder = RouteEventBuilder::new(_fbb);
            if let Some(x) = args.payload { builder.add_payload(x); }
            if let Some(x) = args.source_id { builder.add_source_id(x); }
            if let Some(x) = args.target_id { builder.add_target_id(x); }
            builder.add_entity_type(args.entity_type);
            builder.add_attribute_type(args.attribute_type);
            builder.add_source_type(args.source_type);
            builder.add_target_type(args.target_type);
            builder.finish()
        }


        #[inline]
        pub fn target_type(&self) -> EntityType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<EntityType>(RouteEvent::VT_TARGET_TYPE, Some(EntityType::unused)).unwrap()}
        }
        #[inline]
        pub fn target_id(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(RouteEvent::VT_TARGET_ID, None)}
        }
        #[inline]
        pub fn source_type(&self) -> EntityType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<EntityType>(RouteEvent::VT_SOURCE_TYPE, Some(EntityType::unused)).unwrap()}
        }
        #[inline]
        pub fn source_id(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(RouteEvent::VT_SOURCE_ID, None)}
        }
        #[inline]
        pub fn attribute_type(&self) -> AttributeType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<AttributeType>(RouteEvent::VT_ATTRIBUTE_TYPE, Some(AttributeType::unused)).unwrap()}
        }
        #[inline]
        pub fn entity_type(&self) -> EntityType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<EntityType>(RouteEvent::VT_ENTITY_TYPE, Some(EntityType::unused)).unwrap()}
        }
        #[inline]
        pub fn payload(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(RouteEvent::VT_PAYLOAD, None)}
        }
    }

    impl flatbuffers::Verifiable for RouteEvent<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            v.visit_table(pos)?
                .visit_field::<EntityType>("target_type", Self::VT_TARGET_TYPE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("target_id", Self::VT_TARGET_ID, false)?
                .visit_field::<EntityType>("source_type", Self::VT_SOURCE_TYPE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("source_id", Self::VT_SOURCE_ID, false)?
                .visit_field::<AttributeType>("attribute_type", Self::VT_ATTRIBUTE_TYPE, false)?
                .visit_field::<EntityType>("entity_type", Self::VT_ENTITY_TYPE, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("payload", Self::VT_PAYLOAD, false)?
                .finish();
            Ok(())
        }
    }
    pub struct RouteEventArgs<'a> {
        pub target_type: EntityType,
        pub target_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub source_type: EntityType,
        pub source_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
        pub attribute_type: AttributeType,
        pub entity_type: EntityType,
        pub payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for RouteEventArgs<'a> {
        #[inline]
        fn default() -> Self {
            RouteEventArgs {
                target_type: EntityType::unused,
                target_id: None,
                source_type: EntityType::unused,
                source_id: None,
                attribute_type: AttributeType::unused,
                entity_type: EntityType::unused,
                payload: None,
            }
        }
    }

    pub struct RouteEventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> RouteEventBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_target_type(&mut self, target_type: EntityType) {
            self.fbb_.push_slot::<EntityType>(RouteEvent::VT_TARGET_TYPE, target_type, EntityType::unused);
        }
        #[inline]
        pub fn add_target_id(&mut self, target_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RouteEvent::VT_TARGET_ID, target_id);
        }
        #[inline]
        pub fn add_source_type(&mut self, source_type: EntityType) {
            self.fbb_.push_slot::<EntityType>(RouteEvent::VT_SOURCE_TYPE, source_type, EntityType::unused);
        }
        #[inline]
        pub fn add_source_id(&mut self, source_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RouteEvent::VT_SOURCE_ID, source_id);
        }
        #[inline]
        pub fn add_attribute_type(&mut self, attribute_type: AttributeType) {
            self.fbb_.push_slot::<AttributeType>(RouteEvent::VT_ATTRIBUTE_TYPE, attribute_type, AttributeType::unused);
        }
        #[inline]
        pub fn add_entity_type(&mut self, entity_type: EntityType) {
            self.fbb_.push_slot::<EntityType>(RouteEvent::VT_ENTITY_TYPE, entity_type, EntityType::unused);
        }
        #[inline]
        pub fn add_payload(&mut self, payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(RouteEvent::VT_PAYLOAD, payload);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> RouteEventBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            RouteEventBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<RouteEvent<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for RouteEvent<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("RouteEvent");
            ds.field("target_type", &self.target_type());
            ds.field("target_id", &self.target_id());
            ds.field("source_type", &self.source_type());
            ds.field("source_id", &self.source_id());
            ds.field("attribute_type", &self.attribute_type());
            ds.field("entity_type", &self.entity_type());
            ds.field("payload", &self.payload());
            ds.finish()
        }
    }
    pub enum EventOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Event<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Event<'a> {
        type Inner = Event<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self { _tab: flatbuffers::Table::new(buf, loc) }
        }
    }

    impl<'a> Event<'a> {
        pub const VT_ACTION: flatbuffers::VOffsetT = 4;
        pub const VT_TIMESTAMP: flatbuffers::VOffsetT = 6;
        pub const VT_STATUS: flatbuffers::VOffsetT = 8;
        pub const VT_DATA_TYPE: flatbuffers::VOffsetT = 10;
        pub const VT_DATA: flatbuffers::VOffsetT = 12;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Event { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
            args: &'args EventArgs
        ) -> flatbuffers::WIPOffset<Event<'bldr>> {
            let mut builder = EventBuilder::new(_fbb);
            builder.add_timestamp(args.timestamp);
            if let Some(x) = args.data { builder.add_data(x); }
            builder.add_data_type(args.data_type);
            builder.add_status(args.status);
            builder.add_action(args.action);
            builder.finish()
        }


        #[inline]
        pub fn action(&self) -> Action {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<Action>(Event::VT_ACTION, Some(Action::unused)).unwrap()}
        }
        #[inline]
        pub fn timestamp(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u64>(Event::VT_TIMESTAMP, Some(0)).unwrap()}
        }
        #[inline]
        pub fn status(&self) -> ActionStatus {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<ActionStatus>(Event::VT_STATUS, Some(ActionStatus::unused)).unwrap()}
        }
        #[inline]
        pub fn data_type(&self) -> EventData {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<EventData>(Event::VT_DATA_TYPE, Some(EventData::NONE)).unwrap()}
        }
        #[inline]
        pub fn data(&self) -> Option<flatbuffers::Table<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Table<'a>>>(Event::VT_DATA, None)}
        }
        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_user_event(&self) -> Option<UserEvent<'a>> {
            if self.data_type() == EventData::UserEvent {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { UserEvent::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_cache_event(&self) -> Option<CacheEvent<'a>> {
            if self.data_type() == EventData::CacheEvent {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { CacheEvent::init_from_table(t) }
                })
            } else {
                None
            }
        }

        #[inline]
        #[allow(non_snake_case)]
        pub fn data_as_route_event(&self) -> Option<RouteEvent<'a>> {
            if self.data_type() == EventData::RouteEvent {
                self.data().map(|t| {
                    // Safety:
                    // Created from a valid Table for this object
                    // Which contains a valid union in this slot
                    unsafe { RouteEvent::init_from_table(t) }
                })
            } else {
                None
            }
        }

    }

    impl flatbuffers::Verifiable for Event<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier, pos: usize
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            v.visit_table(pos)?
                .visit_field::<Action>("action", Self::VT_ACTION, false)?
                .visit_field::<u64>("timestamp", Self::VT_TIMESTAMP, false)?
                .visit_field::<ActionStatus>("status", Self::VT_STATUS, false)?
                .visit_union::<EventData, _>("data_type", Self::VT_DATA_TYPE, "data", Self::VT_DATA, false, |key, v, pos| {
                    match key {
                        EventData::UserEvent => v.verify_union_variant::<flatbuffers::ForwardsUOffset<UserEvent>>("EventData::UserEvent", pos),
                        EventData::CacheEvent => v.verify_union_variant::<flatbuffers::ForwardsUOffset<CacheEvent>>("EventData::CacheEvent", pos),
                        EventData::RouteEvent => v.verify_union_variant::<flatbuffers::ForwardsUOffset<RouteEvent>>("EventData::RouteEvent", pos),
                        _ => Ok(()),
                    }
                })?
                .finish();
            Ok(())
        }
    }
    pub struct EventArgs {
        pub action: Action,
        pub timestamp: u64,
        pub status: ActionStatus,
        pub data_type: EventData,
        pub data: Option<flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>>,
    }
    impl<'a> Default for EventArgs {
        #[inline]
        fn default() -> Self {
            EventArgs {
                action: Action::unused,
                timestamp: 0,
                status: ActionStatus::unused,
                data_type: EventData::NONE,
                data: None,
            }
        }
    }

    pub struct EventBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EventBuilder<'a, 'b, A> {
        #[inline]
        pub fn add_action(&mut self, action: Action) {
            self.fbb_.push_slot::<Action>(Event::VT_ACTION, action, Action::unused);
        }
        #[inline]
        pub fn add_timestamp(&mut self, timestamp: u64) {
            self.fbb_.push_slot::<u64>(Event::VT_TIMESTAMP, timestamp, 0);
        }
        #[inline]
        pub fn add_status(&mut self, status: ActionStatus) {
            self.fbb_.push_slot::<ActionStatus>(Event::VT_STATUS, status, ActionStatus::unused);
        }
        #[inline]
        pub fn add_data_type(&mut self, data_type: EventData) {
            self.fbb_.push_slot::<EventData>(Event::VT_DATA_TYPE, data_type, EventData::NONE);
        }
        #[inline]
        pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::UnionWIPOffset>) {
            self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Event::VT_DATA, data);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EventBuilder<'a, 'b, A> {
            let start = _fbb.start_table();
            EventBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Event<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Event<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Event");
            ds.field("action", &self.action());
            ds.field("timestamp", &self.timestamp());
            ds.field("status", &self.status());
            ds.field("data_type", &self.data_type());
            match self.data_type() {
                EventData::UserEvent => {
                    if let Some(x) = self.data_as_user_event() {
                        ds.field("data", &x)
                    } else {
                        ds.field("data", &"InvalidFlatbuffer: Union discriminant does not match value.")
                    }
                },
                EventData::CacheEvent => {
                    if let Some(x) = self.data_as_cache_event() {
                        ds.field("data", &x)
                    } else {
                        ds.field("data", &"InvalidFlatbuffer: Union discriminant does not match value.")
                    }
                },
                EventData::RouteEvent => {
                    if let Some(x) = self.data_as_route_event() {
                        ds.field("data", &x)
                    } else {
                        ds.field("data", &"InvalidFlatbuffer: Union discriminant does not match value.")
                    }
                },
                _ => {
                    let x: Option<()> = None;
                    ds.field("data", &x)
                },
            };
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `Event`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_event_unchecked`.
    pub fn root_as_event(buf: &[u8]) -> Result<Event, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<Event>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `Event` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_event_unchecked`.
    pub fn size_prefixed_root_as_event(buf: &[u8]) -> Result<Event, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<Event>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `Event` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_event_unchecked`.
    pub fn root_as_event_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Event<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<Event<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `Event` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_event_unchecked`.
    pub fn size_prefixed_root_as_event_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<Event<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<Event<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a Event and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `Event`.
    pub unsafe fn root_as_event_unchecked(buf: &[u8]) -> Event {
        flatbuffers::root_unchecked::<Event>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed Event and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `Event`.
    pub unsafe fn size_prefixed_root_as_event_unchecked(buf: &[u8]) -> Event {
        flatbuffers::size_prefixed_root_unchecked::<Event>(buf)
    }
    #[inline]
    pub fn finish_event_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
        root: flatbuffers::WIPOffset<Event<'a>>) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_event_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<Event<'a>>) {
        fbb.finish_size_prefixed(root, None);
    }
}  // pub mod Arkavo

